{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prefect Managed File Transfer","text":"<p>Turn a prefect.io server into a managed file transfer solution. UI and Programatic creation of cron style jobs (aka Flows!) to upload and download files easily between servers. Support local, SFTP remotes plus any Cloud storage supported by rclone -  so thats aws, azure, google, sharepoint, and many more out of the box.</p> <p>Using prefect for managed file transfer means retries, logging, multi node and high availability come as standard - turning prefect into a reliable enterprise ready file transfer solution. </p> <p>This package is not the fastest solution to move files around, but it prioritises reliability and ease of use, making it an excellent choice for replacing both quick cron job copy scripts and enterprise managed file transfer applicances.</p> <p>Key features</p> <ul> <li>Copy and move files between almost any storage system easily.</li> <li>Reliable file moving with checksumming, file size checking etc.</li> <li>Smart and safe moving - settings to allow/block overwriting and to only copy files if they are new or changed.</li> <li>Unzip/Untar compressed folders after downloading them.</li> <li>Repath files as you move them.</li> <li>Complex filtering and ordering of files - by path, age, size etc. Pattern matching with regular expressions.</li> <li>Leverage Prefect.IO built in scheduling and orchestration capabilities:<ul> <li>Transfer files on complex cron schedules</li> <li>notifications on success/failure - slack, email, etc</li> <li>Highly available server architecture - database server + multi-node workers and front ends.</li> </ul> </li> </ul> <p>Example use cases:</p> <ul> <li>Once per day SSH into my database server and copy the latest *.bkup file to a central storage location.</li> <li>Monitor a local network share directory for new files and automatically upload them to a cloud storage bucket.</li> <li>Schedule a weekly job to synchronize files between two remote servers.</li> <li>Move log files from a SSH available web server older than 30 days to a cold storage location.</li> <li>Copy file yyyy-MM-dd.zip from a remote server, where yyyy-MM-dd matches todays date, to a local directory and then unzip it.</li> <li>Download any file in an S3 bucket larger than 1GB and store it in a local directory.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-managedfiletransfer</code> with <code>pip</code>. (Requires an installation of Python 3.10+.)</p> <pre><code>pip install prefect-managedfiletransfer\n# or \nuv add prefect-managedfiletransfer\n</code></pre> <p>We recommend using a Python virtual environment manager such as uv, pipenv, conda or virtualenv.</p> <p>In one (venv) terminal start a prefect server with logs enabled</p> <pre><code>export PREFECT_LOGGING_LEVEL=\"INFO\"\nexport PREFECT_LOGGING_EXTRA_LOGGERS=\"prefect_managedfiletransfer\"\nprefect server start\n# OR uv run prefect server start\n</code></pre> <p>There are many ways to manage infrastructure and code with prefect - here we demonstate starting a local worker:</p> <pre><code>export PREFECT_API_URL=http://127.0.0.1:4200/api\n# or perhaps export PREFECT_API_URL=http://host.docker.internal:4200/api\nexport PREFECT_LOGGING_EXTRA_LOGGERS=\"prefect_managedfiletransfer\"\nexport PREFECT_LOGGING_LEVEL=\"INFO\"\n# [Optional] add all logs: export PREFECT_LOGGING_ROOT_LEVEL=\"INFO\"\n\n\nprefect worker start --pool 'default-pool' --type process\n# OR prefect worker start --pool 'default-pool' --type docker\n</code></pre> <p>Install the blocks using the prefect CLI</p> <pre><code>prefect block register -m prefect_managedfiletransfer\n</code></pre> <p>And then deploy the flows. </p> <pre><code># deploy the flows to run locally\npython -m prefect_managedfiletransfer.deploy --local\n\n# OR deploy to run with a docker image - see deploy.py\npython -m prefect_managedfiletransfer.deploy --docker\n\n# or a version of the above using uv run:\nuv run python -m prefect_managedfiletransfer.deploy --local\nuv run python -m prefect_managedfiletransfer.deploy --docker\n</code></pre> <p>Visit the server UI http://localhost:4200. 1. Create 2 blocks, one source and one destination 2. On the deployments page start a <code>transfer_files_flow</code>. Configure your flow run to copy/move files between the 2 blocks.</p>"},{"location":"#installation-via-docker","title":"Installation via docker","text":"<pre><code># run prefect server in a container port-forwarded to your local machine\u2019s 4200 port:\ndocker run -d -p 4200:4200 prefecthq/prefect:3-latest -- prefect server start --host 0.0.0.0\n</code></pre>"},{"location":"#list-of-components","title":"List of components","text":"<p>Blocks - ServerWithBasicAuthBlock - A block for connecting to a server using basic authentication. - ServerWithPublicKeyAuthBlock - A block for connecting to a server using public key authentication. - RCloneConfigFileBlock - A block for managing RClone configuration files.</p> <p>Tasks - list_remote_files_task - A task for listing files in a remote directory. - download_file_task - A task for downloading a single file from a remote server. - upload_file_task - A task for uploading a single file to a remote server. - [TODO] delete_file_task</p> <p>Flows - transfer_files_flow - a fully featured flow for transferring files between different storage locations. - upload_file_flow - a flow for uploading a file to a remote server. Supports pattern matching by date</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-managedfiletransfer</code>, feel free to open an issue in the prefect-managedfiletransfer repository.</p> <p>Feel free to star or watch <code>prefect-managedfiletransfer</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-managedfiletransfer</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code># install uv first, then\nuv sync\n</code></pre></li> </ol> <p>You can also access all the prefect CLI tooling inside a uv managed venv <pre><code>uv venv\nsource .venv/bin/activate\nprefect server start\n</code></pre></p> <ol> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li>use the build script to run all the checks and tests:</li> </ol> <p><pre><code>./build.sh\n</code></pre> 8. <code>git commit</code>, <code>git push</code>, and create a pull request</p>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-managedfiletransfer</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_managedfiletransfer\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#serverwithbasicauthblock-module","title":"[Serverwithbasicauthblock Module][prefect_managedfiletransfer.ServerWithBasicAuthBlock]","text":"<p>[ServerWithBasicAuthBlock][prefect_managedfiletransfer.ServerWithBasicAuthBlock.ServerWithBasicAuthBlock]</p> <p>A connection to a remote server with basic authentication.</p> <p>To load the ServerWithBasicAuthBlock: <pre><code>from prefect import flow\nfrom prefect_managedfiletransfer.ServerWithBasicAuthBlock import ServerWithBasicAuthBlock\n\n@flow\ndef my_flow():\n    my_block = ServerWithBasicAuthBlock.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Serverwithbasicauthblock Module under Examples Catalog.</p>"},{"location":"blocks_catalog/#serverwithpublickeyauthblock-module","title":"[Serverwithpublickeyauthblock Module][prefect_managedfiletransfer.ServerWithPublicKeyAuthBlock]","text":"<p>[ServerWithPublicKeyAuthBlock][prefect_managedfiletransfer.ServerWithPublicKeyAuthBlock.ServerWithPublicKeyAuthBlock]</p> <p>Block for storing SFTP server details with public key authentication. Attributes:     username: The username for SFTP authentication.     private_key: The private key for SFTP authentication, stored as a SecretStr.     host: The hostname or IP address of the SFTP server.     port: The port number for SFTP, default is 22.</p> <p>To load the ServerWithPublicKeyAuthBlock: <pre><code>from prefect import flow\nfrom prefect_managedfiletransfer.ServerWithPublicKeyAuthBlock import ServerWithPublicKeyAuthBlock\n\n@flow\ndef my_flow():\n    my_block = ServerWithPublicKeyAuthBlock.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Serverwithpublickeyauthblock Module under Examples Catalog.</p>"},{"location":"blocks_catalog/#rcloneconfigfileblock-module","title":"[Rcloneconfigfileblock Module][prefect_managedfiletransfer.RCloneConfigFileBlock]","text":"<p>[RCloneConfigFileBlock][prefect_managedfiletransfer.RCloneConfigFileBlock.RCloneConfigFileBlock]</p> <p>Block for storing RClone configuration file contents. This block is used to store the contents of an RClone configuration file, which can be used to configure RClone for file transfers. The block is updated with tokends when they are refreshed, allowing for dynamic updates to the RClone configuration.</p> <p>Generate a config locally with <code>rclone config create my_sharepoint onedrive</code> like below, then save the contents in a block with remote_name=my_sharepoint,config_file_contents= [my_sharepoint] type = onedrive token = {\"access_token\":\"...\",\"token_type\":\"Bearer\",\"refresh_token\":\"...\",\"expiry\":\"2000-00-00T00:00:00.000000000Z\"} drive_id = b!-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa drive_type = documentLibrary.</p> <p>To load the RCloneConfigFileBlock: <pre><code>from prefect import flow\nfrom prefect_managedfiletransfer.RCloneConfigFileBlock import RCloneConfigFileBlock\n\n@flow\ndef my_flow():\n    my_block = RCloneConfigFileBlock.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Rcloneconfigfileblock Module under Examples Catalog.</p>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-managedfiletransfer</code>.</p>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_managedfiletransfer.flows","title":"<code>prefect_managedfiletransfer.flows</code>","text":"<p>This is an example flows module</p>"},{"location":"flows/#prefect_managedfiletransfer.flows-classes","title":"Classes","text":""},{"location":"flows/#prefect_managedfiletransfer.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_managedfiletransfer.flows.hello_and_goodbye","title":"<code>hello_and_goodbye</code>","text":"<p>Sample flow that says hello and goodbye!</p> Source code in <code>prefect_managedfiletransfer/flows.py</code> <pre><code>@flow\ndef hello_and_goodbye():\n    \"\"\"\n    Sample flow that says hello and goodbye!\n    \"\"\"\n    ServerWithBasicAuthBlock.seed_value_for_example()\n    block = ServerWithBasicAuthBlock.load(\"sample-block\")\n\n    print(hello_prefect_managedfiletransfer())\n    print(f\"The block's contents: {block.host}:{block.port} as {block.username}\")\n    print(goodbye_prefect_managedfiletransfer())\n\n    return \"Done\"\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_managedfiletransfer.tasks","title":"<code>prefect_managedfiletransfer.tasks</code>","text":"<p>This is an example tasks module</p>"},{"location":"tasks/#prefect_managedfiletransfer.tasks-functions","title":"Functions","text":""},{"location":"tasks/#prefect_managedfiletransfer.tasks.goodbye_prefect_managedfiletransfer","title":"<code>goodbye_prefect_managedfiletransfer</code>","text":"<p>Sample task that says goodbye!</p> <p>Returns:</p> Type Description <code>str</code> <p>A farewell for your collection</p> Source code in <code>prefect_managedfiletransfer/tasks.py</code> <pre><code>@task\ndef goodbye_prefect_managedfiletransfer() -&gt; str:\n    \"\"\"\n    Sample task that says goodbye!\n\n    Returns:\n        A farewell for your collection\n    \"\"\"\n    return \"Goodbye, prefect-managedfiletransfer!\"\n</code></pre>"},{"location":"tasks/#prefect_managedfiletransfer.tasks.hello_prefect_managedfiletransfer","title":"<code>hello_prefect_managedfiletransfer</code>","text":"<p>Sample task that says hello!</p> <p>Returns:</p> Type Description <code>str</code> <p>A greeting for your collection</p> Source code in <code>prefect_managedfiletransfer/tasks.py</code> <pre><code>@task\ndef hello_prefect_managedfiletransfer() -&gt; str:\n    \"\"\"\n    Sample task that says hello!\n\n    Returns:\n        A greeting for your collection\n    \"\"\"\n    return \"Hello, prefect-managedfiletransfer!\"\n</code></pre>"}]}